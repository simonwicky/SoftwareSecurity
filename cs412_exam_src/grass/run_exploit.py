#!/usr/bin/env python3 

import argparse
import os
import signal
import shutil
import subprocess
import sys
import tempfile
import time

# Unbuffered version of stream
# From https://stackoverflow.com/questions/107705/disable-output-buffering
class Unbuffered(object):
  def __init__(self, stream):
    self.stream = stream
  def write(self, data):
    self.stream.write(data)
    self.stream.flush()
  def writelines(self, datas):
    self.stream.writelines(datas)
    self.stream.flush()
  def __getattr__(self, attr):
    return getattr(self.stream, attr)

def check_external():
  # Test objectives: grassexternal.py running
  print('%%%%%%%% Checking for grassexternal')
  ps_proc = subprocess.Popen(['ps', '-ef'], stdout = subprocess.PIPE)
  grep_proc = subprocess.Popen(['egrep', '(grassexternal|server)'], stdin = ps_proc.stdout)
  grep_proc.wait()
  ps_proc.wait()
  print('-------- Done: Checking for grassexternal')

def main():
  # Unbuffered stdout 
  sys.stdout = Unbuffered(sys.stdout)

  parser = argparse.ArgumentParser(description = 'Run exploits')
  parser.add_argument('N', help = 'Run exploit N')
  args = parser.parse_args()

  # Create temporary directory to run exploit
  tmp_basedir = tempfile.mkdtemp(prefix = 'tmpexploit')
  client_wd = tmp_basedir
  server_wd = os.path.join(tmp_basedir, 'basedir')
  # os.mkdir(client_wd)
  os.mkdir(server_wd)

  # Copy in necessary files
  files = ['client_command', 'grass.conf']
  grass_root = os.environ['GRASS_ROOT']
  source = os.path.join(grass_root, 'bugs')
  source = os.path.join(source, args.N)
  for file in files:
    dest = os.path.join(tmp_basedir, file)
    shutil.copyfile(os.path.join(source, file), dest)

  # Copy in server files
  server_files_source = os.path.join(source, 'server_files')
  if os.path.isdir(server_files_source):
    with os.scandir(server_files_source) as it:
      for entry in it:
        if entry.is_file():
          shutil.copyfile(entry.path, os.path.join(server_wd, entry.name))

  # Copy in client files
  client_files_source = os.path.join(source, 'client_files')
  if os.path.isdir(client_files_source):
    with os.scandir(client_files_source) as it:
      for entry in it:
        if entry.is_file():
          shutil.copyfile(entry.path, os.path.join(client_wd, entry.name))

  # subprocess.run(['find', tmp_basedir])
  # Run server and client
  bin_path = os.path.join(grass_root, 'bin')
  server_bin = os.path.join(bin_path, 'server')
  client_bin = os.path.join(bin_path, 'client')
  server_proc = subprocess.Popen([server_bin], cwd = tmp_basedir)
  client_proc = subprocess.Popen([client_bin, '127.0.0.1', '1337', 'client_command'], 
                                  cwd = tmp_basedir)

  # Run till end
  client_proc.wait()
  print('-------- Client done')

  time.sleep(0.5)
  server_ret = server_proc.poll()
  if server_ret == None:
    print('%%%%%%%% Server running')
    check_external()
    print('%%%%%%%% Killing server with SIGINT')
    os.kill(server_proc.pid, signal.SIGINT)  
    server_proc.wait()
  else:
    if server_ret < 0:
      print('-------- Server terminated by signal ' + str(-server_ret))
    else:
      print('-------- Server terminated with returncode ' + str(server_ret))

  # Remove temporary exploit directory
  shutil.rmtree(tmp_basedir, ignore_errors = True)

if __name__ == '__main__':
  main()