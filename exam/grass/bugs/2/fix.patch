diff -ru src/commands/command.cpp src_patched/commands/command.cpp
--- src/commands/command.cpp	2020-06-25 15:30:57.000000000 +0200
+++ src_patched/commands/command.cpp	2020-06-25 15:33:04.000000000 +0200
@@ -8,6 +8,8 @@
 #include <linux/limits.h>
 #include <sys/stat.h>
 #include <sys/types.h>
+#include <sys/wait.h>
+#include <fcntl.h>
 
 #include "inc/services/threadpool.hpp"
 #include "inc/server/server.hpp"
@@ -399,26 +401,45 @@
   }
 
   char cmd[PATH_MAX];
-  snprintf(cmd, PATH_MAX, "cd %s; grep -r -l '%s' >> %15s 2>&1", state.curDir.c_str(), args[0].c_str(), tmpName);
-  int systemRetCode = system(cmd);
-  /* Grep return vals are
-  * 0 = line selected
-  * 1 = no line selected 
-  * 2 = other error          */
-  if (systemRetCode != 2) {
-    char buf[PATH_MAX];
-    memset(buf, 0, sizeof(buf));
+  snprintf(cmd, PATH_MAX, "cd %s", state.curDir.c_str());
+  system(cmd);
 
-    while (read(tmpFileFD, buf, PATH_MAX - 1) != 0) {
-      result.append(buf);
-      memset(buf, 0, sizeof(buf));
+  pid_t pid = fork();
+    if (pid == -1) {
+      //no child created
+      result.append(ERROR_STR "grep failed\n");
+    } else if (pid == 0) {
+      char grep_stmt[strlen(args[0].c_str())];
+      strcpy(grep_stmt, args[0].c_str());
+      char *args[] = {"grep","-r", "-l", grep_stmt, nullptr};
+
+      int fd = open(tmpName, O_RDWR | O_CREAT, S_IRUSR | S_IWUSR);
+      dup2(fd, 1);
+      dup2(fd, 2);
+      close(fd);
+
+      execv("/bin/grep", args);
+      //in case of failure
+      _exit(127);
+    } else {
+      int status;
+      if (waitpid(pid, &status, 0) == -1) {
+        result.append(ERROR_STR "grep failed\n");
+        return 1;
+      } else {
+        char buf[PATH_MAX];
+        memset(buf, 0, sizeof(buf));
+
+        while (read(tmpFileFD, buf, PATH_MAX - 1) != 0) {
+          result.append(buf);
+          memset(buf, 0, sizeof(buf));
+        }
+      }
     }
-  } else
-    result.append(ERROR_STR "grep failed");
 
   close(tmpFileFD);
 
-  return (systemRetCode == 2);
+  return 0;
 }
 
 int dateCommand::exec(std::string &result, UserState &state) {
