diff -ru src/commands/command.cpp src_patched/commands/command.cpp
--- src/commands/command.cpp	2020-06-25 15:34:41.000000000 +0200
+++ src_patched/commands/command.cpp	2020-06-25 15:36:42.000000000 +0200
@@ -8,6 +8,8 @@
 #include <linux/limits.h>
 #include <sys/stat.h>
 #include <sys/types.h>
+#include <sys/wait.h>
+#include <fcntl.h>
 
 #include "inc/services/threadpool.hpp"
 #include "inc/server/server.hpp"
@@ -93,23 +95,38 @@
     return 0;
   }
 
-  char cmd[PATH_MAX];
-  snprintf(cmd, PATH_MAX, "ping %s -c 1 >> %15s 2>&1", args[0].c_str(), tmpName);
-  /* Ping success value is zero */
-  int systemRetCode = system(cmd);
-  if (systemRetCode >= 0) {
-    char buf[PATH_MAX];
-    memset(buf, 0, PATH_MAX);
 
-    while (read(tmpFileFD, buf, PATH_MAX - 1) != 0)
-      result.append(buf);
-  } else
-    result.append(ERROR_STR "ping failed\n");
 
-  close(tmpFileFD);
+  pid_t pid = fork();
+  if (pid == -1) {
+    //no child created
+    result.append(ERROR_STR "ping failed\n");
+  } else if (pid == 0) {
+    char host[strlen(args[0].c_str())];
+    strcpy(host, args[0].c_str());
+    char *args[] = {"ping",host, "-c","1",">>", tmpName, "2>&1", nullptr};
+    execv("/bin/ping", args);
+    //in case of failure
+    _exit(127);
+  } else {
+    int status;
+    if (waitpid(pid, &status, 0) == -1) {
+      result.append(ERROR_STR "ping failed\n");
+      return 1;
+    } else {
+     char buf[PATH_MAX];
+     memset(buf, 0, PATH_MAX);
+ 
+     while (read(tmpFileFD, buf, PATH_MAX - 1) != 0)
+       result.append(buf);
 
-  return (systemRetCode >= 0);
-}
+    }
+  }
+ 
+   close(tmpFileFD); 
+   
+   return 0;
+ }
 
 int lsCommand::exec(std::string &result, UserState &state) {
   if (!state.loggedIn()) {
